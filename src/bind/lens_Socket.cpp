/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Socket
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "lens/Socket.h"

using namespace lens;

/** lens::Socket::Socket(int socket_type)
 * include/lens/Socket.h:94
 */
static int Socket_Socket(lua_State *L) {
  try {
    int socket_type = dub::checkint(L, 1);
    Socket *retval__ = new Socket(socket_type);
    retval__->dub_pushobject(L, retval__, "lens.Socket", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual lens::Socket::~Socket()
 * include/lens/Socket.h:108
 */
static int Socket__Socket(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "lens.Socket"));
    if (userdata->gc) {
      Socket *self = (Socket *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void lens::Socket::close()
 * include/lens/Socket.h:112
 */
static int Socket_close(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    self->close();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "close: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "close: Unknown exception");
  }
  return dub::error(L);
}

/** int lens::Socket::bind(const char *localhost=NULL, int port=0)
 * include/lens/Socket.h:122
 */
static int Socket_bind(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      const char *localhost = dub::checkstring(L, 2);
      int port = dub::checkint(L, 3);
      lua_pushnumber(L, self->bind(localhost, port));
      return 1;
    } else if (top__ >= 2) {
      const char *localhost = dub::checkstring(L, 2);
      lua_pushnumber(L, self->bind(localhost));
      return 1;
    } else {
      lua_pushnumber(L, self->bind());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "bind: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bind: Unknown exception");
  }
  return dub::error(L);
}

/** bool lens::Socket::connect(const char *host, int port)
 * include/lens/Socket.h:127
 */
static int Socket_connect(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    const char *host = dub::checkstring(L, 2);
    int port = dub::checkint(L, 3);
    lua_pushboolean(L, self->connect(host, port));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "connect: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "connect: Unknown exception");
  }
  return dub::error(L);
}

/** void lens::Socket::connectFinish()
 * include/lens/Socket.h:131
 */
static int Socket_connectFinish(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    self->connectFinish();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "connectFinish: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "connectFinish: Unknown exception");
  }
  return dub::error(L);
}

/** void lens::Socket::listen(int backlog=BACKLOG)
 * include/lens/Socket.h:136
 */
static int Socket_listen(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int backlog = dub::checkint(L, 2);
      self->listen(backlog);
      return 0;
    } else {
      self->listen();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "listen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "listen: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize lens::Socket::accept(lua_State *L)
 * include/lens/Socket.h:141
 */
static int Socket_accept(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    return self->accept(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "accept: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "accept: Unknown exception");
  }
  return dub::error(L);
}

/** void lens::Socket::setRecvTimeout(int timeout)
 * include/lens/Socket.h:143
 */
static int Socket_setRecvTimeout(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    int timeout = dub::checkint(L, 2);
    self->setRecvTimeout(timeout);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRecvTimeout: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRecvTimeout: Unknown exception");
  }
  return dub::error(L);
}

/** void lens::Socket::setSendTimeout(int timeout)
 * include/lens/Socket.h:147
 */
static int Socket_setSendTimeout(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    int timeout = dub::checkint(L, 2);
    self->setSendTimeout(timeout);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSendTimeout: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSendTimeout: Unknown exception");
  }
  return dub::error(L);
}

/** void lens::Socket::setNonBlocking()
 * include/lens/Socket.h:151
 */
static int Socket_setNonBlocking(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    self->setNonBlocking();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setNonBlocking: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setNonBlocking: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize lens::Socket::recv(lua_State *L)
 * include/lens/Socket.h:165
 */
static int Socket_recv(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    return self->recv(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "recv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "recv: Unknown exception");
  }
  return dub::error(L);
}

/** int lens::Socket::send(lua_State *L)
 * include/lens/Socket.h:171
 */
static int Socket_send(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    lua_pushnumber(L, self->send(L));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "send: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "send: Unknown exception");
  }
  return dub::error(L);
}

/** const char* lens::Socket::localHost() const
 * include/lens/Socket.h:175
 */
static int Socket_localHost(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    lua_pushstring(L, self->localHost());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "localHost: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "localHost: Unknown exception");
  }
  return dub::error(L);
}

/** int lens::Socket::localPort() const
 * include/lens/Socket.h:181
 */
static int Socket_localPort(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    lua_pushnumber(L, self->localPort());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "localPort: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "localPort: Unknown exception");
  }
  return dub::error(L);
}

/** const char* lens::Socket::remoteHost() const
 * include/lens/Socket.h:187
 */
static int Socket_remoteHost(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    lua_pushstring(L, self->remoteHost());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "remoteHost: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "remoteHost: Unknown exception");
  }
  return dub::error(L);
}

/** int lens::Socket::remotePort() const
 * include/lens/Socket.h:193
 */
static int Socket_remotePort(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    lua_pushnumber(L, self->remotePort());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "remotePort: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "remotePort: Unknown exception");
  }
  return dub::error(L);
}

/** int lens::Socket::port() const
 * include/lens/Socket.h:199
 */
static int Socket_port(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    lua_pushnumber(L, self->port());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "port: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "port: Unknown exception");
  }
  return dub::error(L);
}

/** int lens::Socket::fd() const
 * include/lens/Socket.h:205
 */
static int Socket_fd(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    lua_pushnumber(L, self->fd());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "fd: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "fd: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize lens::Socket::recvAll(lua_State *L)
 * include/lens/Socket.h:211
 */
static int Socket_recvAll(lua_State *L) {
  try {
    Socket *self = *((Socket **)dub::checksdata(L, 1, "lens.Socket"));
    return self->recvAll(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "recvAll: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "recvAll: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int Socket___tostring(lua_State *L) {
  Socket *self = *((Socket **)dub::checksdata_n(L, 1, "lens.Socket"));
  lua_pushfstring(L, "lens.Socket: %p (%s:%d  > %s:%d)", self, self-> localHost() , self-> localPort() , self-> remoteHost() , self-> remotePort() );
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Socket_member_methods[] = {
  { "new"          , Socket_Socket        },
  { "__gc"         , Socket__Socket       },
  { "close"        , Socket_close         },
  { "bind"         , Socket_bind          },
  { "connect"      , Socket_connect       },
  { "connectFinish", Socket_connectFinish },
  { "listen"       , Socket_listen        },
  { "accept"       , Socket_accept        },
  { "setRecvTimeout", Socket_setRecvTimeout },
  { "setSendTimeout", Socket_setSendTimeout },
  { "setNonBlocking", Socket_setNonBlocking },
  { "recv"         , Socket_recv          },
  { "send"         , Socket_send          },
  { "localHost"    , Socket_localHost     },
  { "localPort"    , Socket_localPort     },
  { "remoteHost"   , Socket_remoteHost    },
  { "remotePort"   , Socket_remotePort    },
  { "port"         , Socket_port          },
  { "fd"           , Socket_fd            },
  { "recvAll"      , Socket_recvAll       },
  { "__tostring"   , Socket___tostring    },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub::const_Reg Socket_const[] = {
  { "TCP"          , Socket::TCP          },
  { "UDP"          , Socket::UDP          },
  { NULL, 0},
};

extern "C" int luaopen_lens_Socket(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "lens.Socket");
  // <mt>
  // register class constants
  dub::register_const(L, Socket_const);

  // register member methods
  dub::fregister(L, Socket_member_methods);
  // setup meta-table
  dub::setup(L, "lens.Socket");
  // <mt>
  return 1;
}
