/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class File
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include "lens/File.h"

using namespace lens;

/** lens::File::File()
 * include/lens/File.h:86
 */
static int File_File(lua_State *L) {
  try {
    File *retval__ = new File();
    dub::pushudata(L, retval__, "lens.File", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual lens::File::~File()
 * include/lens/File.h:89
 */
static int File__File(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "lens.File"));
    if (userdata->gc) {
      File *self = (File *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** int lens::File::fd()
 * include/lens/File.h:93
 */
static int File_fd(lua_State *L) {
  try {
    File *self = *((File **)dub::checksdata(L, 1, "lens.File"));
    lua_pushnumber(L, self->fd());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "fd: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "fd: Unknown exception");
  }
  return dub::error(L);
}

/** void lens::File::close()
 * include/lens/File.h:97
 */
static int File_close(lua_State *L) {
  try {
    File *self = *((File **)dub::checksdata(L, 1, "lens.File"));
    self->close();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "close: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "close: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize lens::File::read(size_t sz, lua_State *L)
 * include/lens/File.h:119
 */
static int File_read(lua_State *L) {
  try {
    File *self = *((File **)dub::checksdata(L, 1, "lens.File"));
    size_t sz = dub::checkint(L, 2);
    return self->read(sz, L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "read: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "read: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize lens::File::readLine(lua_State *L)
 * include/lens/File.h:133
 */
static int File_readLine(lua_State *L) {
  try {
    File *self = *((File **)dub::checksdata(L, 1, "lens.File"));
    return self->readLine(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "readLine: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "readLine: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize lens::File::readAll(lua_State *L)
 * include/lens/File.h:136
 */
static int File_readAll(lua_State *L) {
  try {
    File *self = *((File **)dub::checksdata(L, 1, "lens.File"));
    return self->readAll(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "readAll: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "readAll: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int File___tostring(lua_State *L) {
  File *self = *((File **)dub::checksdata_n(L, 1, "lens.File"));
  lua_pushfstring(L, "lens.File: %p (%i)", self, self-> fd());
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg File_member_methods[] = {
  { "new"          , File_File            },
  { "__gc"         , File__File           },
  { "fd"           , File_fd              },
  { "close"        , File_close           },
  { "read"         , File_read            },
  { "readLine"     , File_readLine        },
  { "readAll"      , File_readAll         },
  { "__tostring"   , File___tostring      },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub::const_Reg File_const[] = {
  { "None"         , File::None           },
  { "Read"         , File::Read           },
  { "Write"        , File::Write          },
  { "OK"           , File::OK             },
  { "Wait"         , File::Wait           },
  { "End"          , File::End            },
  { NULL, 0},
};

extern "C" int luaopen_lens_File(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "lens.File");
  // <mt>
  // register class constants
  dub::register_const(L, File_const);

  // register member methods
  dub::fregister(L, File_member_methods);
  // setup meta-table
  dub::setup(L, "lens.File");
  // <mt>
  return 1;
}
